{"name":"kor","tagline":"A tiny subset of Knockout for reactive programming","body":"\r\n**kor** is a JavaScript library supporting reactive programming. It is actually\r\njust a tiny subset of the excellent **Knockout** library with all the stuff to\r\ndo with binding to the DOM removed. This is because there are several ways to\r\nachieve the DOM-binding part (for example, React) but which lack anything as\r\nmature or helpful as Knockout's reactive programming support.\r\n\r\nBy cutting Knockout down to its core (or *kor*?) we end up with a library that\r\nis only 5.2 KB in size (minified+gzipped) and yet supplies the support needed\r\nfor convenient reactive programming.\r\n\r\n##Authorship\r\n\r\nGiven kor's obvious direct heritage, it would be ridiculous for me to claim\r\nauthorship - I just deleted a bunch of stuff. At the same time the Knockout\r\nteam have not decided to create this subset so they should not be blamed for\r\nany shortcomings it suffers from.\r\n\r\nTherefore to give credit and blame where its due, let's say:\r\n\r\n> Copyright (c) Steven Sanderson, the Knockout.js team, and other contributors\r\nhttp://knockoutjs.com/, with parts deleted by Daniel Earwicker\r\n\r\n##License\r\n\r\nMIT license - [http://www.opensource.org/licenses/mit-license.php](http://www.opensource.org/licenses/mit-license.php)\r\n\r\n##What survived?\r\n\r\nThe surviving functions work exactly the same as in Knockout. The only\r\ndifference is that when loaded by a script tag in the browser, the root object\r\nis called `kor` instead of `ko`, to avoid collision with Knockout.\r\n\r\n* `kor.observable`\r\n* `kor.observableArray`\r\n* `kor.computed` and `kor.pureComputed` (prefer the latter)\r\n* `kor.extenders` and built-ins such as `throttle`, `rateLimit`\r\n* `kor.unwrap` and `kor.peekObservable`\r\n* `kor.toJS`\r\n\r\n##Using with Knockout plugins\r\n\r\nThere are extension libraries that work alongside Knockout, such as\r\n[Mapping](http://knockoutjs.com/documentation/plugins-mapping.html)\r\nor my own [knockout.clear](https://github.com/danielearwicker/knockout.clear).\r\n\r\nIn the browser, if you are just using a `script` tag to import kor, you would\r\nneed to \"rename\" kor by doing this before you load any extension libraries:\r\n\r\n    window.ko = window.kor;\r\n\r\nOf course, this is only useful if the extension library is satisfied by the\r\nsubset retained in kor.\r\n\r\n(NB. I'm planning to fix knockout.clear so it automatically works with kor).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}